클래스는 Public 생성자 대신 정적 팩터리 메서드를 제공할 수 있다.
 
장점1) 이름을 가질 수 있다.
-> 생성자에 넘기는 매개변수와 생서자 자체만으로는 반환될 객체의 특성을 제대로 설명하지 못한다.
 반면 정적 팩터리는 이름만 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있다.
 new BigInteger(10,1, r)
 BigInteger.probablePrime(10, r) -> 생성자로 생성하는 것보다, 소수 구하기의 뜻이 더 담겨있음.

장점2) 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
-> 반복되는 요청에 같은 객체를 반환하는 식으로 정적 팩토리 방식의 클래스는 언제 어느 인스턴스를 살아 있게 할지를 철저하게 통제할 수 있다.

장점3) 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.
-> 이것은 반환할 객체의 클래스를 자유롭게 선택할 수 있게하는 '엄청난 유연성'을 준다. 이 유연성을 응용하면 구현 클래스를 공개하지 않고도 그 객체를 반환할 수 있어 API를 작게 유지할 수 있다.

장점4) 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.

장점5) 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
 -> 대표적인 서비스 제공자 프레임워크로는 JDBC가 있다. 제공자 프레임워크는 3개의 핵심 컴포넌트로 이뤄진다. 구현체의 동작을 정의하는 서비스 인터페이스, 구현체를 등록할 때 사용하는 제공자 등록 API, 클라이언트 서비스의 인스턴스를 얻을 때 사용하는 서비스 접근 API가 그 주인공이다.
 
단점1) 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.
단점2) 정적 팩터리 메서드는 프로그래머가 찾기 어렵다. 생성자처럼 API설명에 명확히 드러나지 않으니 사용자는 정적 팩터리 메서드 방식 클래스를 인스턴스화할 방법을 알아내야한다.

정적 팩터리 메서드에 흔히 사용하는 명명 방식
- from, of, valueOf, intance 혹은 getInstance, create, getType, bewType, type
