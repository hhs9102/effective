정적 팩터리와 생성자에는 똑같은 제약이 하나 있다. 선택적 매개변수가 많을 때 적절히 대응하기 어렵다는 점이다.
-> 점층적 생성자 패턴도 쓸 수 있찌만, 매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.
   -> 코드를 읽을 때, 각 값의 의막 무엇인지 헷갈릴 것이고, 매개변수가 몇 개인지도 주의해서 세어보아야한다.
   -> 클라이언트가 실수로 매개변수의 순서를 바꿔 건네줘도 컴파일러는 알아채지 못하고, 결국 런타임에 엉뚱한 동작을 하게 된다.

두번째 대응방안으로는 자바빈즈 패턴이다.
-> 매개변수가 없는 생성자로 객체를 만든 후, 세터 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.
   -> 하지만 객체 하나를 만들려면 메서드를 여러 개 해야하고, 객체가 완전히 생성되기 전까지는 일관성이 무너진 상태에 놓이게 된다.
   
점층적 생성자패턴의 안전성과 자바빈즈 패턴의 가독성을 겸비한 빌더패턴이 있다.
클라이언트는 필요한 객체를 직접 만드는 대신, 필수 매개변수만으로 생성자를 호출해 빌더 객체를 얻는다.
마지막으로 매개변수가 없는 build 메서드를 호출해 필요한 객체를 얻는다.

잘못된 매개변수를 최대한 일찍 발견하려면, 빌더의 생성자와 메서드에서 입력 매개변수를 검사하고, build 메서드가 호출하는 생성자에서 여러 매개변수에 걸친 불변식을 검사하자.
